const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = 'https://jhqnypyxrkwdrgutzttf.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpocW55cHl4cmt3ZHJndXR6dHRmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTE1OTkyMiwiZXhwIjoyMDcwNzM1OTIyfQ.RYzOyy09wv5G2tB4u2ykZMgBUY_uh7vJP030wAFwpmw';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function fixToyotaParkingFees() {
  console.log('üîß Ë±äÁî∞Â∏Ç„ÅÆÈßêËªäÂ†¥ÊñôÈáë„Çí‰øÆÊ≠£‰∏≠...\n');

  // Á¨¨1ÈßêËªäÂ†¥ (ID: 6676)
  const parking1Rates = [
    { type: 'base', price: 150, minutes: 30 },
    { type: 'max', price: 250, minutes: 330, time_range: '1:00ÔΩû6:30' }
  ];

  console.log('üìç Á¨¨1ÈßêËªäÂ†¥ (ID: 6676) „ÇíÊõ¥Êñ∞‰∏≠...');
  const { data: data1, error: error1 } = await supabase
    .from('parking_spots')
    .update({ rates: parking1Rates })
    .eq('id', 6676)
    .select();

  if (error1) {
    console.error('‚ùå Á¨¨1ÈßêËªäÂ†¥„ÅÆÊõ¥Êñ∞„Ç®„É©„Éº:', error1);
  } else {
    console.log('‚úÖ Á¨¨1ÈßêËªäÂ†¥„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
    console.log('   ÊñôÈáë: 150ÂÜÜ/30ÂàÜ„ÄÅÂ§úÈñìÊúÄÂ§ß250ÂÜÜÔºà1:00-6:30Ôºâ\n');
  }

  // Á¨¨2ÈßêËªäÂ†¥ (ID: 6677)
  const parking2Rates = [
    { type: 'base', price: 150, minutes: 30, time_range: '7:00ÔΩû23:00' },
    { type: 'max', price: 400, minutes: 480, time_range: '23:00ÔΩû7:00' }
  ];

  console.log('üìç Á¨¨2ÈßêËªäÂ†¥ (ID: 6677) „ÇíÊõ¥Êñ∞‰∏≠...');
  const { data: data2, error: error2 } = await supabase
    .from('parking_spots')
    .update({ rates: parking2Rates })
    .eq('id', 6677)
    .select();

  if (error2) {
    console.error('‚ùå Á¨¨2ÈßêËªäÂ†¥„ÅÆÊõ¥Êñ∞„Ç®„É©„Éº:', error2);
  } else {
    console.log('‚úÖ Á¨¨2ÈßêËªäÂ†¥„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
    console.log('   ÊñôÈáë: 150ÂÜÜ/30ÂàÜÔºà7:00-23:00Ôºâ„ÄÅÂ§úÈñìÊúÄÂ§ß400ÂÜÜÔºà23:00-7:00Ôºâ\n');
  }

  // Ëã•ÂÆÆÈßêËªäÂ†¥ (ID: 38432)
  const wakamiyaRates = [
    { type: 'base', price: 150, minutes: 30, time_range: '7:00ÔΩû23:00' },
    { type: 'max', price: 400, minutes: 480, time_range: '23:00ÔΩû7:00' }
  ];

  console.log('üìç Ëã•ÂÆÆÈßêËªäÂ†¥ (ID: 38432) „ÇíÊõ¥Êñ∞‰∏≠...');
  const { data: data3, error: error3 } = await supabase
    .from('parking_spots')
    .update({ rates: wakamiyaRates })
    .eq('id', 38432)
    .select();

  if (error3) {
    console.error('‚ùå Ëã•ÂÆÆÈßêËªäÂ†¥„ÅÆÊõ¥Êñ∞„Ç®„É©„Éº:', error3);
  } else {
    console.log('‚úÖ Ëã•ÂÆÆÈßêËªäÂ†¥„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
    console.log('   ÊñôÈáë: 150ÂÜÜ/30ÂàÜÔºà7:00-23:00Ôºâ„ÄÅÂ§úÈñìÊúÄÂ§ß400ÂÜÜÔºà23:00-7:00Ôºâ\n');
  }

  // Êõ¥Êñ∞ÁµêÊûú„ÇíÁ¢∫Ë™ç
  console.log('üìä Êõ¥Êñ∞ÁµêÊûú„ÇíÁ¢∫Ë™ç‰∏≠...\n');
  const { data: results, error: queryError } = await supabase
    .from('parking_spots')
    .select('id, name, rates')
    .in('id', [6676, 6677, 38432])
    .order('id');

  if (queryError) {
    console.error('‚ùå Á¢∫Ë™ç„ÇØ„Ç®„É™„Ç®„É©„Éº:', queryError);
  } else {
    console.log('‚úÖ Êõ¥Êñ∞Âæå„ÅÆ„Éá„Éº„Çø:');
    results.forEach(parking => {
      console.log(`\n   ${parking.name} (ID: ${parking.id}):`);
      console.log('   ÊñôÈáë‰ΩìÁ≥ª:', JSON.stringify(parking.rates, null, 2));
    });
  }

  console.log('\n‚úÖ „Åô„Åπ„Å¶„ÅÆÊõ¥Êñ∞„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
}

fixToyotaParkingFees().catch(err => {
  console.error('‚ùå „Ç®„É©„Éº:', err);
  process.exit(1);
});
