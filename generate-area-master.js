const fs = require('fs');
const path = require('path');

/**
 * restaurants_data„Éï„Ç©„É´„ÉÄ„Åã„ÇâÂÖ®„Ç®„É™„Ç¢ÊÉÖÂ†±„ÇíÊäΩÂá∫„Åó„Å¶„Éû„Çπ„Çø„Éº„É™„Çπ„Éà„ÇíÁîüÊàê
 */
async function generateAreaMaster() {
  console.log('=== „Ç®„É™„Ç¢„Éû„Çπ„Çø„Éº„É™„Çπ„ÉàÁîüÊàê ===\n');

  const restaurantsDataDir = '/Users/user/WebApp/camping_note/restaurants_data';
  const outputPath = path.join(__dirname, 'data', 'area-master.json');

  // data„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
  const dataDir = path.dirname(outputPath);
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }

  // area_*.json„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
  const files = fs.readdirSync(restaurantsDataDir)
    .filter(f => f.startsWith('area_') && f.endsWith('.json'))
    .sort();

  console.log(`üìÇ ${files.length}ÂÄã„ÅÆ„Ç®„É™„Ç¢„Éï„Ç°„Ç§„É´„ÇíÊ§úÂá∫\n`);

  const areas = [];
  let totalRestaurants = 0;

  // ÂêÑ„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„ÅßÊÉÖÂ†±„ÇíÊäΩÂá∫
  for (const file of files) {
    try {
      const filePath = path.join(restaurantsDataDir, file);
      const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));

      // „Ç®„É™„Ç¢Âêç„ÇíÊäΩÂá∫Ôºàarea_Â∞èÊ®Ω.json ‚Üí Â∞èÊ®ΩÔºâ
      const areaName = file.replace('area_', '').replace('.json', '');

      // „É¨„Çπ„Éà„É©„É≥„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„ÄÅ„Çπ„Ç≥„Ç¢3.5‰ª•‰∏ä„ÅÆ„É¨„Çπ„Éà„É©„É≥„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      const highScoreRestaurants = data.restaurants
        ? data.restaurants.filter(r => r.score && r.score >= 3.5)
        : [];

      if (highScoreRestaurants.length > 0) {
        areas.push({
          name: areaName,
          displayName: data.name || areaName,
          type: data.type || 'area',
          filePath: `area_${areaName}.json`,
          restaurantCount: data.restaurantCount || data.restaurants.length,
          highScoreCount: highScoreRestaurants.length,
          topScore: highScoreRestaurants[0]?.score || 0,
          rankingUrl: data.rankingUrl || null,
          hasData: true
        });

        totalRestaurants += highScoreRestaurants.length;
      }
    } catch (error) {
      console.error(`‚ö†Ô∏è  ${file} „ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:`, error.message);
    }
  }

  // „Çπ„Ç≥„Ç¢È†Ü„Å´„ÇΩ„Éº„Éà
  areas.sort((a, b) => b.topScore - a.topScore);

  // „Éû„Çπ„Çø„Éº„É™„Çπ„Éà‰ΩúÊàê
  const masterData = {
    generatedAt: new Date().toISOString(),
    totalAreas: areas.length,
    totalRestaurants: totalRestaurants,
    dataSource: restaurantsDataDir,
    areas: areas
  };

  // JSON‰øùÂ≠ò
  fs.writeFileSync(outputPath, JSON.stringify(masterData, null, 2), 'utf8');

  console.log('‚úÖ „Ç®„É™„Ç¢„Éû„Çπ„Çø„Éº„É™„Çπ„ÉàÁîüÊàêÂÆå‰∫Ü\n');
  console.log(`üìä Áµ±Ë®àÊÉÖÂ†±:`);
  console.log(`   - ÊúâÂäπ„Ç®„É™„Ç¢Êï∞: ${areas.length}`);
  console.log(`   - Á∑è„É¨„Çπ„Éà„É©„É≥Êï∞Ôºà3.5‰ª•‰∏äÔºâ: ${totalRestaurants}`);
  console.log(`   - Âá∫ÂäõÂÖà: ${outputPath}\n`);

  // „Éà„ÉÉ„Éó10„Ç®„É™„Ç¢„ÇíË°®Á§∫
  console.log('üìç „Éà„ÉÉ„Éó„Çπ„Ç≥„Ç¢„Ç®„É™„Ç¢Ôºà‰∏ä‰Ωç10‰ª∂Ôºâ:');
  areas.slice(0, 10).forEach((area, index) => {
    console.log(`   ${index + 1}. ${area.displayName} (‚≠ê${area.topScore}) - ${area.highScoreCount}‰ª∂`);
  });

  console.log('\n');

  return masterData;
}

// ÂÆüË°å
if (require.main === module) {
  generateAreaMaster()
    .then(() => {
      console.log('‚úÖ ÂÆå‰∫Ü');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå „Ç®„É©„Éº:', error);
      process.exit(1);
    });
}

module.exports = { generateAreaMaster };
